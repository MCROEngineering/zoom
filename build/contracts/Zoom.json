{
  "contractName": "Zoom",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "combine",
      "outputs": [
        {
          "name": "",
          "type": "bytes"
        },
        {
          "name": "",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50610377806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063124542e314610046575b600080fd5b34801561005257600080fd5b506100ad600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610194565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156100f15780820151818401526020810190506100d6565b50505050905090810190601f16801561011e5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561015757808201518184015260208101905061013c565b50505050905090810190601f1680156101845780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b606080606080606060208601600381015160001a610100600283015160001a020159604052604051945060408102855260005b600282028110156101e9576000602082026020880101526001810190506101c7565b5059604052604051935060208102845260005b8181101561021b576000602082026020870101526001810190506101fc565b5060068201915059604052602060405101925060006020840160005b8381101561032e57600285015160001a610100600187015160001a020160008052855160001a6002811461028857600887019650600160146101000a03600c880351166000526014870196506102da565b600487015160001a610100600389015160001a02016040810260208c0101600689015160001a61010060058b015160001a0201600160146101000a03600c8284510103511660005260088a0199505050505b506000516000808389846207a120fa3d6000863e846040850260208d0101523d6040850260408d01015282880197503d850194503d860195503d86036020850260208c010152505050600181019050610237565b5081855260208101604052505050508082945094505050509150915600a165627a7a72305820424bfd71c55903f93dffc9d55aa8311747439bbf544d10b57e92658f09060cd30029",
  "deployedBytecode": "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063124542e314610046575b600080fd5b34801561005257600080fd5b506100ad600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610194565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156100f15780820151818401526020810190506100d6565b50505050905090810190601f16801561011e5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561015757808201518184015260208101905061013c565b50505050905090810190601f1680156101845780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b606080606080606060208601600381015160001a610100600283015160001a020159604052604051945060408102855260005b600282028110156101e9576000602082026020880101526001810190506101c7565b5059604052604051935060208102845260005b8181101561021b576000602082026020870101526001810190506101fc565b5060068201915059604052602060405101925060006020840160005b8381101561032e57600285015160001a610100600187015160001a020160008052855160001a6002811461028857600887019650600160146101000a03600c880351166000526014870196506102da565b600487015160001a610100600389015160001a02016040810260208c0101600689015160001a61010060058b015160001a0201600160146101000a03600c8284510103511660005260088a0199505050505b506000516000808389846207a120fa3d6000863e846040850260208d0101523d6040850260408d01015282880197503d850194503d860195503d86036020850260208c010152505050600181019050610237565b5081855260208101604052505050508082945094505050509150915600a165627a7a72305820424bfd71c55903f93dffc9d55aa8311747439bbf544d10b57e92658f09060cd30029",
  "sourceMap": "243:9548:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;243:9548:2;;;;;;;",
  "deployedSourceMap": "243:9548:2:-;;;;;;;;;;;;;;;;;;;;;;;;268:9521;;8:9:-1;5:2;;;30:1;27;20:12;5:2;268:9521:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;268:9521:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;268:9521:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;330:5;344;707:30;833:26;952:25;1177:2;1166:9;1161:20;1408:1;1403:3;1398:13;1391:22;1388:1;1382:33;1360:3;1351:1;1346:3;1341:13;1334:22;1331:1;1325:33;1320:44;1299:130;1496:7;1490:4;1483:21;1621:4;1615:11;1594:32;;1828:2;1819:7;1814:18;1710:17;1686:160;1937:1;1922:305;1960:1;1951:7;1947:15;1944:1;1941:22;1922:305;;;2194:1;2146:2;2143:1;2138:11;2085:2;2066:17;2061:27;2030:142;2001:212;1978:1;1975;1971:9;1966:14;;1922:305;;;1926:14;2294:7;2288:4;2281:21;2399:4;2393:11;2376:28;;2624:2;2615:7;2610:18;2488:13;2464:178;2760:1;2745:293;2770:7;2767:1;2764:14;2745:293;;;3005:1;2957:2;2954:1;2949:11;2896:2;2881:13;2876:23;2845:138;2816:208;2793:1;2790;2786:9;2781:14;;2745:293;;;2749:14;3112:1;3107:3;3102:13;3095:20;;3182:7;3176:4;3169:21;3305:2;3298:4;3292:11;3287:21;3271:37;;3408:1;3501:2;3487:12;3482:22;3584:1;3560:5757;3603:7;3591:10;3588:23;3560:5757;;;3858:1;3853:3;3848:13;3841:22;3838:1;3832:33;3806:3;3797:1;3792:3;3787:13;3780:22;3777:1;3771:33;3766:44;3741:142;3997:66;3990:4;3982:83;4157:3;4150:12;4147:1;4141:23;4186:1;4181:1776;;;;6168:1;6163:3;6158:13;6151:20;;6597:1;6592:2;6587:3;6583:12;6578:22;6456:2;6451:3;6447:12;6407:83;6303:323;6272:4;6264:384;6776:2;6771:3;6766:14;6759:21;;4134:2665;;4181:1776;4461:1;4456:3;4451:13;4444:22;4441:1;4435:33;4405:3;4396:1;4391:3;4386:13;4379:22;4376:1;4370:33;4365:44;4336:154;4845:2;4834:9;4829:19;4733:2;4714:17;4710:26;4613:257;5116:1;5111:3;5106:13;5099:22;5096:1;5090:33;5060:3;5051:1;5046:3;5041:13;5034:22;5031:1;5025:33;5020:44;4991:154;5759:1;5754:2;5749:3;5745:12;5740:22;5618:2;5577:6;5519:18;5513:25;5467:117;5425:196;5385:267;5281:507;5250:4;5242:568;5936:1;5931:3;5926:13;5919:20;;4188:1769;;;4134:2665;;6945:4;6938:13;7442:1;7389;7317:10;7216:3;7149:9;7096:6;7038:406;7703:16;7675:1;7632:17;7591:151;8055:17;8000:2;7988:10;7983:20;7950:2;7931:17;7926:27;7893:136;7860:234;8484:16;8429:2;8417:10;8412:20;8340:2;8321:17;8316:27;8283:175;8250:273;8658:10;8653:3;8648:22;8641:29;;8779:16;8760:17;8756:41;8735:62;;8886:16;8866:18;8861:43;8839:65;;9228:16;9208:18;9203:43;9147:2;9135:10;9131:19;9062:2;9047:13;9043:22;9008:169;8975:293;7001:2285;3649:5668;;3644:1;3632:10;3628:18;3614:32;;3560:5757;;;3564:23;9414:18;9400:12;9393:41;9710:2;9691:17;9686:28;9680:4;9673:43;997:8729;;;;9753:12;9767:13;9744:38;;;;268:9521;;;;;;:::o",
  "source": "/*\n \n * source       https://github.com/MCROEngineering/zoom/\n * @name        Zoom Contract\n * @package     ZoomDev\n * @author      Micky Socaci <micky@mcro.tech>\n * @license     MIT\n\n Generic ABI Batch caller \n\n*/\n\npragma solidity ^0.4.25;\n\n\ncontract Zoom {\n    \n    function combine(bytes memory inputData) public view returns (bytes memory, bytes memory) {\n\n        // 0x00 - we use for scratch memory\n        // 0x20 - not used\n        // 0x40 - free memory pointer\n\n        // holds call result pointer addresses that we use to load reference \n        // call addresses, and populate \"resultAddresses\" and \"OutputBuffer\"\n        // 1st word: address address\n        // 2nd word: uint256 length\n        bytes memory internalAddresses; \n        \n        // holds result \"start\" addresses and their length in output buffer\n        bytes memory resultOffsets; \n        \n        // binary continuous buffer containing the resulting call values\n        bytes memory OutputBuffer;\n\n        assembly {\n            \n            // [0-1] version\n            // [2-3] number of calls\n\n            // add 32 since input is treated as a variable\n            let ptr := add( inputData, 32 )\n\n            // get number of calls -> mul first byte by 256 and add the rest from byte 2\n            let callnum := add(\n                mul( byte( 0, mload( add( ptr, 2 ) ) ), 256),\n                byte( 0, mload( add( ptr, 3 ) ) )\n            )\n\n            // move free memory pointer\n            mstore(0x40, msize()) \n            \n            // move and resize internalAddresses in new memory\n            internalAddresses := mload(0x40)\n\n            // store length in first 32 bytes\n            mstore(\n                internalAddresses,\n                // 64 bytes for each result.. 32 address / 32 length\n                mul( callnum, 64 )\n            ) \n    \n            // allocate free space for internalAddresses\n            for { let n := 0 } lt(n, mul(callnum, 2)) { n := add(n, 1) } {\n                mstore( \n                    add ( \n                        add (internalAddresses, 32), // offset by 32 ( len )\n                        mul( n, 32) \n                    ),\n                    0\n                )\n            }\n\n            // move free memory pointer\n            mstore(0x40, msize()) \n\n            // move and resize resultOffsets in new memory\n            resultOffsets := mload(0x40)\n\n            // store length in first 32 bytes\n            mstore(\n                resultOffsets,\n                // 32 bytes for each result.. as we want to be able to just mstore / mload\n                mul( callnum, 32 )\n            ) \n    \n            // allocate free space for resultOffsets starting in data address space\n            for { let n := 0 } lt(n, callnum) { n := add(n, 1) } {\n                mstore( \n                    add ( \n                        add (resultOffsets, 32), // offset by 32 ( len )\n                        mul( n, 32) \n                    ),\n                    0\n                )\n            }\n\n            // shift pointer to call start\n            ptr := add( ptr, 6 )\n\n            // move free memory pointer\n            mstore(0x40, msize()) \n            \n            // move OutputBuffer to free memory space\n            OutputBuffer := add( mload(0x40), 32)\n\n            // save length so we can set it in OutputBuffer\n            let actualResultLength := 0\n\n            // set write pointer \n            let thisOutputPointer := add( OutputBuffer, 32)\n            \n            // process calls \n            for { let callNumber := 0 } lt(callNumber, callnum) { callNumber := add(callNumber, 1) } {\n\n                // get call data length in bytes [1-2]\n                let dataLength := add(\n                    mul( byte( 0, mload( add( ptr, 1 ) ) ), 256),\n                    byte( 0, mload( add( ptr, 2 ) ) )\n                )\n\n                // clean up 0-32 byte scratch area so we can store a new address\n                mstore( 0x00 , 0x0000000000000000000000000000000000000000000000000000000000000000 )\n                \n                // call type cases\n                switch byte( 0, mload( ptr ) )\n                case 2 {\n                    \n                    // read result_id where the \"to address\" is expected ( bytes[3-4] )\n                    let result_id := add(\n                        mul( byte( 0, mload( add( ptr, 3 ) ) ), 256),\n                        byte( 0, mload( add( ptr, 4 ) ) )\n                    )\n                    \n                    // find our result's address space\n                    let resultStartAddress := add(\n                        // shift pointer by 32 bytes, to data space\n                        add(internalAddresses, 32),\n                        // now multiply by 2 words ( record size )\n                        mul( result_id, 64)\n                    )\n                    \n                    // read offset for the result ( bytes[5-6] )\n                    let offset := add(\n                        mul( byte( 0, mload( add( ptr, 5 ) ) ), 256),\n                        byte( 0, mload( add( ptr, 6 ) ) )\n                    )\n    \n                    // load the contract address we're going to \"call\"\n                    mstore (0x00, \n                        and( \n                            // load 32 bytes, 12 garbage + 20 address\n                            mload( \n                                sub( \n                                    add( \n                                        mload(resultStartAddress), \n                                    offset),\n                                12) \n                            ),\n                            // 20 byte address \"bytemask\"\n                            sub( exp(256, 20), 1 )\n                        )\n                    )\n                   \n                    // shift pointer by 8 bytes, to call data space\n                    ptr := add( ptr, 8 )\n                }\n                default {\n                    // type 1 contains address in the next 20 bytes bytes [8-28]\n                    // shift pointer by 8 bytes, to address space\n                    ptr := add( ptr, 8 )\n\n                    // load the contract address we're going to \"call\"\n                    mstore (0x00, \n                        and( \n                            // load 32 bytes, 12 garbage + 20 address\n                            mload( \n                                sub(ptr, 12) \n                            ),\n                            // 20 byte address \"bytemask\"\n                            sub( exp(256, 20), 1 )\n                        )\n                    )\n                    \n                    // shift pointer by 20 bytes, to call data space\n                    ptr := add( ptr, 20 )\n\n                }\n                \n                // finally load our address into a stack variable that our call can use\n                let toAddress := mload( 0x00 )\n\n                // do the call!\n                {\n                    let success := staticcall(      \n                                        500000,     \n                                        toAddress ,     // To addr\n                                        ptr,            // Inputs are stored at current ptr location\n                                        dataLength,     // input length\n                                        0,          \n                                        0)          \n        \n                    // copy result byte size from return value ( ignore first 32 bytes ) ( next 32 bytes )\n                    returndatacopy( \n                        thisOutputPointer,\n                        0, \n                        returndatasize() \n                    )\n                    \n                    // save result address in so we can easily reference it\n                    mstore( \n                        add(\n                            add( internalAddresses, 32),\n                            mul( callNumber, 64)\n                        ),\n                        thisOutputPointer\n                    )\n\n                    // save result length so we know how many bytes to read when\n                    // preparing return OutputBuffer\n                    mstore( \n                        add(\n                            add( internalAddresses, 64), // add 32 so we're in the result space\n                            mul( callNumber, 64)\n                        ),\n                        returndatasize() \n                    )\n                    \n                    // shift pointer by data length.. so we're at next call\n                    ptr := add( ptr, dataLength )\n\n                    // move write pointer \n                    thisOutputPointer := add(thisOutputPointer, returndatasize() )\n                    \n                    actualResultLength := add( actualResultLength, returndatasize() )\n\n                    // store result start offset\n                    mstore( \n                        add ( \n                            add(resultOffsets, 32), // offset by 32 bytes to data space\n                            mul(callNumber, 32) \n                        ),\n                        sub( actualResultLength, returndatasize() )\n                    )\n                }\n                \n            }\n            \n            // set result length for OutputBuffer\n            mstore(OutputBuffer, actualResultLength ) \n\n            // move free memory pointer so return does not overwrite our OutputBuffer\n            // msize() breaks here for some reason.. so we move free memory space\n            // address by hand using the write pointer.\n            mstore(0x40, add( thisOutputPointer, 32 ) )\n        }\n        \n        return ( OutputBuffer, resultOffsets );\n    }\n}\n\n",
  "sourcePath": "/Volumes/Dev/blockbits/zoomdev/contracts/Zoom.sol",
  "ast": {
    "absolutePath": "/Volumes/Dev/blockbits/zoomdev/contracts/Zoom.sol",
    "exportedSymbols": {
      "Zoom": [
        782
      ]
    },
    "id": 783,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 757,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".25"
        ],
        "nodeType": "PragmaDirective",
        "src": "216:24:2"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 782,
        "linearizedBaseContracts": [
          782
        ],
        "name": "Zoom",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 780,
              "nodeType": "Block",
              "src": "358:9431:2",
              "statements": [
                {
                  "assignments": [],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 767,
                      "name": "internalAddresses",
                      "nodeType": "VariableDeclaration",
                      "scope": 781,
                      "src": "707:30:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 766,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "707:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 768,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "707:30:2"
                },
                {
                  "assignments": [],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 770,
                      "name": "resultOffsets",
                      "nodeType": "VariableDeclaration",
                      "scope": 781,
                      "src": "833:26:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 769,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "833:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 771,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "833:26:2"
                },
                {
                  "assignments": [],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 773,
                      "name": "OutputBuffer",
                      "nodeType": "VariableDeclaration",
                      "scope": 781,
                      "src": "952:25:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 772,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "952:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 774,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "952:25:2"
                },
                {
                  "externalReferences": [
                    {
                      "inputData": {
                        "declaration": 759,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1166:9:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "internalAddresses": {
                        "declaration": 767,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1594:17:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "internalAddresses": {
                        "declaration": 767,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1710:17:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "internalAddresses": {
                        "declaration": 767,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2066:17:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "resultOffsets": {
                        "declaration": 770,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2376:13:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "resultOffsets": {
                        "declaration": 770,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2488:13:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "resultOffsets": {
                        "declaration": 770,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2881:13:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "OutputBuffer": {
                        "declaration": 773,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "3271:12:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "OutputBuffer": {
                        "declaration": 773,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "3487:12:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "internalAddresses": {
                        "declaration": 767,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "4714:17:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "internalAddresses": {
                        "declaration": 767,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "7931:17:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "internalAddresses": {
                        "declaration": 767,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8321:17:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "OutputBuffer": {
                        "declaration": 773,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9400:12:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "resultOffsets": {
                        "declaration": 770,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9047:13:2",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 775,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let ptr := add(inputData, 32)\n    let callnum := add(mul(byte(0, mload(add(ptr, 2))), 256), byte(0, mload(add(ptr, 3))))\n    mstore(0x40, msize())\n    internalAddresses := mload(0x40)\n    mstore(internalAddresses, mul(callnum, 64))\n    for {\n        let n := 0\n    }\n    lt(n, mul(callnum, 2))\n    {\n        n := add(n, 1)\n    }\n    {\n        mstore(add(add(internalAddresses, 32), mul(n, 32)), 0)\n    }\n    mstore(0x40, msize())\n    resultOffsets := mload(0x40)\n    mstore(resultOffsets, mul(callnum, 32))\n    for {\n        let n := 0\n    }\n    lt(n, callnum)\n    {\n        n := add(n, 1)\n    }\n    {\n        mstore(add(add(resultOffsets, 32), mul(n, 32)), 0)\n    }\n    ptr := add(ptr, 6)\n    mstore(0x40, msize())\n    OutputBuffer := add(mload(0x40), 32)\n    let actualResultLength := 0\n    let thisOutputPointer := add(OutputBuffer, 32)\n    for {\n        let callNumber := 0\n    }\n    lt(callNumber, callnum)\n    {\n        callNumber := add(callNumber, 1)\n    }\n    {\n        let dataLength := add(mul(byte(0, mload(add(ptr, 1))), 256), byte(0, mload(add(ptr, 2))))\n        mstore(0x00, 0x0000000000000000000000000000000000000000000000000000000000000000)\n        switch byte(0, mload(ptr))\n        case 2 {\n            let result_id := add(mul(byte(0, mload(add(ptr, 3))), 256), byte(0, mload(add(ptr, 4))))\n            let resultStartAddress := add(add(internalAddresses, 32), mul(result_id, 64))\n            let offset := add(mul(byte(0, mload(add(ptr, 5))), 256), byte(0, mload(add(ptr, 6))))\n            mstore(0x00, and(mload(sub(add(mload(resultStartAddress), offset), 12)), sub(exp(256, 20), 1)))\n            ptr := add(ptr, 8)\n        }\n        default {\n            ptr := add(ptr, 8)\n            mstore(0x00, and(mload(sub(ptr, 12)), sub(exp(256, 20), 1)))\n            ptr := add(ptr, 20)\n        }\n        let toAddress := mload(0x00)\n        {\n            let success := staticcall(500000, toAddress, ptr, dataLength, 0, 0)\n            returndatacopy(thisOutputPointer, 0, returndatasize())\n            mstore(add(add(internalAddresses, 32), mul(callNumber, 64)), thisOutputPointer)\n            mstore(add(add(internalAddresses, 64), mul(callNumber, 64)), returndatasize())\n            ptr := add(ptr, dataLength)\n            thisOutputPointer := add(thisOutputPointer, returndatasize())\n            actualResultLength := add(actualResultLength, returndatasize())\n            mstore(add(add(resultOffsets, 32), mul(callNumber, 32)), sub(actualResultLength, returndatasize()))\n        }\n    }\n    mstore(OutputBuffer, actualResultLength)\n    mstore(0x40, add(thisOutputPointer, 32))\n}",
                  "src": "988:8762:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "id": 776,
                        "name": "OutputBuffer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 773,
                        "src": "9753:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 777,
                        "name": "resultOffsets",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 770,
                        "src": "9767:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "id": 778,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "9751:31:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bytes memory,bytes memory)"
                    }
                  },
                  "functionReturnParameters": 765,
                  "id": 779,
                  "nodeType": "Return",
                  "src": "9744:38:2"
                }
              ]
            },
            "documentation": null,
            "id": 781,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "combine",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 760,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 759,
                  "name": "inputData",
                  "nodeType": "VariableDeclaration",
                  "scope": 781,
                  "src": "285:22:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 758,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "285:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "284:24:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 765,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 762,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 781,
                  "src": "330:5:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 761,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "330:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 764,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 781,
                  "src": "344:5:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 763,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "344:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "329:28:2"
            },
            "scope": 782,
            "src": "268:9521:2",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 783,
        "src": "243:9548:2"
      }
    ],
    "src": "216:9577:2"
  },
  "legacyAST": {
    "absolutePath": "/Volumes/Dev/blockbits/zoomdev/contracts/Zoom.sol",
    "exportedSymbols": {
      "Zoom": [
        782
      ]
    },
    "id": 783,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 757,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".25"
        ],
        "nodeType": "PragmaDirective",
        "src": "216:24:2"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 782,
        "linearizedBaseContracts": [
          782
        ],
        "name": "Zoom",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 780,
              "nodeType": "Block",
              "src": "358:9431:2",
              "statements": [
                {
                  "assignments": [],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 767,
                      "name": "internalAddresses",
                      "nodeType": "VariableDeclaration",
                      "scope": 781,
                      "src": "707:30:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 766,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "707:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 768,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "707:30:2"
                },
                {
                  "assignments": [],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 770,
                      "name": "resultOffsets",
                      "nodeType": "VariableDeclaration",
                      "scope": 781,
                      "src": "833:26:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 769,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "833:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 771,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "833:26:2"
                },
                {
                  "assignments": [],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 773,
                      "name": "OutputBuffer",
                      "nodeType": "VariableDeclaration",
                      "scope": 781,
                      "src": "952:25:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 772,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "952:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 774,
                  "initialValue": null,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "952:25:2"
                },
                {
                  "externalReferences": [
                    {
                      "inputData": {
                        "declaration": 759,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1166:9:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "internalAddresses": {
                        "declaration": 767,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1594:17:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "internalAddresses": {
                        "declaration": 767,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1710:17:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "internalAddresses": {
                        "declaration": 767,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2066:17:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "resultOffsets": {
                        "declaration": 770,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2376:13:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "resultOffsets": {
                        "declaration": 770,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2488:13:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "resultOffsets": {
                        "declaration": 770,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2881:13:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "OutputBuffer": {
                        "declaration": 773,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "3271:12:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "OutputBuffer": {
                        "declaration": 773,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "3487:12:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "internalAddresses": {
                        "declaration": 767,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "4714:17:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "internalAddresses": {
                        "declaration": 767,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "7931:17:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "internalAddresses": {
                        "declaration": 767,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "8321:17:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "OutputBuffer": {
                        "declaration": 773,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9400:12:2",
                        "valueSize": 1
                      }
                    },
                    {
                      "resultOffsets": {
                        "declaration": 770,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "9047:13:2",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 775,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let ptr := add(inputData, 32)\n    let callnum := add(mul(byte(0, mload(add(ptr, 2))), 256), byte(0, mload(add(ptr, 3))))\n    mstore(0x40, msize())\n    internalAddresses := mload(0x40)\n    mstore(internalAddresses, mul(callnum, 64))\n    for {\n        let n := 0\n    }\n    lt(n, mul(callnum, 2))\n    {\n        n := add(n, 1)\n    }\n    {\n        mstore(add(add(internalAddresses, 32), mul(n, 32)), 0)\n    }\n    mstore(0x40, msize())\n    resultOffsets := mload(0x40)\n    mstore(resultOffsets, mul(callnum, 32))\n    for {\n        let n := 0\n    }\n    lt(n, callnum)\n    {\n        n := add(n, 1)\n    }\n    {\n        mstore(add(add(resultOffsets, 32), mul(n, 32)), 0)\n    }\n    ptr := add(ptr, 6)\n    mstore(0x40, msize())\n    OutputBuffer := add(mload(0x40), 32)\n    let actualResultLength := 0\n    let thisOutputPointer := add(OutputBuffer, 32)\n    for {\n        let callNumber := 0\n    }\n    lt(callNumber, callnum)\n    {\n        callNumber := add(callNumber, 1)\n    }\n    {\n        let dataLength := add(mul(byte(0, mload(add(ptr, 1))), 256), byte(0, mload(add(ptr, 2))))\n        mstore(0x00, 0x0000000000000000000000000000000000000000000000000000000000000000)\n        switch byte(0, mload(ptr))\n        case 2 {\n            let result_id := add(mul(byte(0, mload(add(ptr, 3))), 256), byte(0, mload(add(ptr, 4))))\n            let resultStartAddress := add(add(internalAddresses, 32), mul(result_id, 64))\n            let offset := add(mul(byte(0, mload(add(ptr, 5))), 256), byte(0, mload(add(ptr, 6))))\n            mstore(0x00, and(mload(sub(add(mload(resultStartAddress), offset), 12)), sub(exp(256, 20), 1)))\n            ptr := add(ptr, 8)\n        }\n        default {\n            ptr := add(ptr, 8)\n            mstore(0x00, and(mload(sub(ptr, 12)), sub(exp(256, 20), 1)))\n            ptr := add(ptr, 20)\n        }\n        let toAddress := mload(0x00)\n        {\n            let success := staticcall(500000, toAddress, ptr, dataLength, 0, 0)\n            returndatacopy(thisOutputPointer, 0, returndatasize())\n            mstore(add(add(internalAddresses, 32), mul(callNumber, 64)), thisOutputPointer)\n            mstore(add(add(internalAddresses, 64), mul(callNumber, 64)), returndatasize())\n            ptr := add(ptr, dataLength)\n            thisOutputPointer := add(thisOutputPointer, returndatasize())\n            actualResultLength := add(actualResultLength, returndatasize())\n            mstore(add(add(resultOffsets, 32), mul(callNumber, 32)), sub(actualResultLength, returndatasize()))\n        }\n    }\n    mstore(OutputBuffer, actualResultLength)\n    mstore(0x40, add(thisOutputPointer, 32))\n}",
                  "src": "988:8762:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "id": 776,
                        "name": "OutputBuffer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 773,
                        "src": "9753:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 777,
                        "name": "resultOffsets",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 770,
                        "src": "9767:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "id": 778,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "9751:31:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bytes memory,bytes memory)"
                    }
                  },
                  "functionReturnParameters": 765,
                  "id": 779,
                  "nodeType": "Return",
                  "src": "9744:38:2"
                }
              ]
            },
            "documentation": null,
            "id": 781,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "combine",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 760,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 759,
                  "name": "inputData",
                  "nodeType": "VariableDeclaration",
                  "scope": 781,
                  "src": "285:22:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 758,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "285:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "284:24:2"
            },
            "payable": false,
            "returnParameters": {
              "id": 765,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 762,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 781,
                  "src": "330:5:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 761,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "330:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 764,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 781,
                  "src": "344:5:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 763,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "344:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "329:28:2"
            },
            "scope": 782,
            "src": "268:9521:2",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 783,
        "src": "243:9548:2"
      }
    ],
    "src": "216:9577:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.0-beta.1",
  "updatedAt": "2018-12-14T06:25:26.968Z"
}